                    crop={crop}
                    zoom={zoom}
                    aspect={16 / 9}
                    cropShape="rect"
                    showGrid={false}
                    onCropChange={setCrop}
                    onZoomChange={setZoom}
                    onCropComplete={(_, pixels) => setCroppedAreaPixels(pixels)}
                  />
                </div>
                <div className="flex items-center gap-4">
                  <label className="flex items-center gap-2 text-sm text-[#4c5a7a]">
                    Zoom
                    <input
                      type="range"
                      min={1}
                      max={3}
                      step={0.1}
                      value={zoom}
                      onChange={(event) => setZoom(Number(event.target.value))}
                      className="h-1 w-48 cursor-pointer appearance-none rounded-full bg-[#1d2742]/40"
                    />
                  </label>
                  <button
                    type="button"
                    onClick={resetImageState}
                    className="rounded-full border border-white/55 bg-white/60 px-4 py-2 text-sm text-[#1d2742] transition hover:scale-[1.01]"
                  >
                    Choose another photo
                  </button>
                </div>
              </div>
            ) : (
              <label className="flex h-64 w-full cursor-pointer flex-col items-center justify-center gap-3 rounded-2xl border border-dashed border-white/55 bg-white/15 text-sm text-[#4c5a7a] transition hover:bg-white/25">
                <span className="text-base font-medium text-[#18223a]">Drag & drop or browse</span>
                <span className="text-xs text-[#7c89aa]">JPG, PNG or HEIC up to 15MB</span>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  className="hidden"
                />
              </label>
            )}
          </div>
        ) : null}

        {step === 2 ? (
          <div className="space-y-6">
            <input
              type="text"
              value={placeQuery}
              onChange={(event) => {
                setPlaceQuery(event.target.value);
                setShowNewPlace(false);
              }}
              placeholder="Search by name or address"
              className="w-full rounded-2xl border border-white/55 bg-white/50 px-4 py-3 text-[#18223a] placeholder:text-[#7c89aa] shadow-inner focus:outline-none focus:ring-2 focus:ring-[#2a3554]/30"
            />
            {isSearchingPlaces ? (
              <div className="rounded-2xl border border-white/45 bg-white/25 px-4 py-3 text-sm text-[#4c5a7a]">
                Searching…
              </div>
            ) : null}
            <div className="space-y-3">
              {placeResults.map((place) => {
                const isActive = selectedPlace?.id === place.id;
                return (
                  <button
                    key={place.id}
                    type="button"
                    onClick={() => {
                      setSelectedPlace(place);
                      setShowNewPlace(false);
                    }}
                    className={`w-full rounded-2xl border px-4 py-3 text-left transition ${
                      isActive
                        ? "border-[#1d2742]/70 bg-white/65 text-[#18223a] shadow-[0_24px_50px_-28px_rgba(19,28,46,0.45)]"
                        : "border-white/45 bg-white/20 text-[#2a3554] hover:bg-white/35"
                    }`}
                  >
                    <p className="text-sm font-semibold text-[#18223a]">{place.name}</p>
                    <p className="text-xs text-[#7c89aa]">{place.address ?? "Address coming soon"}</p>
                  </button>
                );
              })}
            </div>
            <div className="flex flex-wrap items-center gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowNewPlace(true);
                  setSelectedPlace(null);
                }}
                className="rounded-full border border-white/45 bg-white/45 px-4 py-2 text-sm text-[#1d2742] transition hover:scale-[1.01]"
              >
                Can’t find it? Add new place
              </button>
              {selectedPlace ? (
                <span className="rounded-full border border-white/45 bg-white/45 px-4 py-2 text-sm text-[#1d2742]">
                  Selected: {selectedPlace.name}
                </span>
              ) : null}
            </div>

            {showNewPlace ? (
              <div className="space-y-3 rounded-2xl border border-white/55 bg-white/35 p-4 shadow-inner">
                <input
                  type="text"
                  value={newPlace.name}
                  onChange={(event) => setNewPlace((prev) => ({ ...prev, name: event.target.value }))}
                  placeholder="Place name"
                  className="w-full rounded-xl border border-white/55 bg-white/55 px-4 py-2 text-sm text-[#18223a] placeholder:text-[#7c89aa]"
                />
                <input
                  type="text"
                  value={newPlace.address}
                  onChange={(event) => setNewPlace((prev) => ({ ...prev, address: event.target.value }))}
                  placeholder="Address (optional)"
                  className="w-full rounded-xl border border-white/55 bg-white/55 px-4 py-2 text-sm text-[#18223a] placeholder:text-[#7c89aa]"
                />
                <div className="flex items-center gap-3">
                  <span className="text-xs text-[#4c5a7a]">Typical spend</span>
                  <select
                    value={newPlace.price_tier}
                    onChange={(event) =>
                      setNewPlace((prev) => ({ ...prev, price_tier: Number(event.target.value) }))
                    }
                    className="rounded-xl border border-white/55 bg-white/55 px-3 py-2 text-sm text-[#18223a]"
                  >
                    <option value={1}>¥</option>
                    <option value={2}>¥¥</option>
                    <option value={3}>¥¥¥</option>
                  </select>
                </div>
                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={handleCreatePlace}
                    disabled={savingPlace}
                    className="rounded-full border border-[#1d2742] bg-[#1d2742] px-4 py-2 text-sm font-semibold text-white shadow-[0_20px_45px_-28px_rgba(19,28,46,0.52)] transition hover:scale-[1.01] disabled:cursor-not-allowed disabled:opacity-70"
                  >
                    {savingPlace ? "Saving…" : "Add place"}
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowNewPlace(false)}
                    className="rounded-full border border-white/45 bg-white/45 px-4 py-2 text-sm text-[#1d2742] transition hover:scale-[1.01]"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            ) : null}
          </div>
        ) : null}

        {step === 3 ? (
          <div className="space-y-6">
            <div className="grid gap-3 sm:grid-cols-3">
              {[1, 2, 3].map((tier) => {
                const active = priceTier === tier;
                const label = formatPriceLabel(tier);
                return (
                  <button
                    key={tier}
                    type="button"
                    onClick={() => setPriceTier(tier)}
                    className={`rounded-2xl border px-4 py-6 text-center transition ${
                      active
                        ? "border-[#1d2742]/70 bg-white/65 text-[#18223a] shadow-[0_26px_55px_-30px_rgba(19,28,46,0.45)]"
                        : "border-white/45 bg-white/20 text-[#2a3554] hover:bg-white/35"
                    }`}
                  >
                    <span className="text-2xl font-semibold text-[#18223a]">{label}</span>
                    <p className="mt-2 text-xs text-[#4c5a7a]">{tier === 1 ? "Casual" : tier === 2 ? "Treat" : "Splurge"}</p>
                  </button>
                );
              })}
            </div>
            <p className="text-xs text-[#7c89aa]">
              This reflects what you spent on this visit. It can differ from the spot’s usual price tier.
            </p>
          </div>
        ) : null}

        {step === 4 ? (
          <div className="space-y-6">
            <textarea
              value={note}
              onChange={(event) => setNote(event.target.value)}
              rows={4}
              placeholder="Add a quick memory, tip, or dish you loved."
              className="w-full rounded-2xl border border-white/55 bg-white/50 px-4 py-3 text-sm text-[#18223a] placeholder:text-[#7c89aa] shadow-inner"
            />
            <div className="rounded-2xl border border-white/55 bg-white/35 p-4 shadow-inner">
              <p className="text-sm font-semibold text-[#18223a]">You’re sharing</p>
              <ul className="mt-2 space-y-1 text-sm text-[#2a3554]">
                <li>
                  Place:
                  <span className="ml-1 font-medium text-[#18223a]">
                    {selectedPlace?.name ?? "Select a place"}
                  </span>
                </li>
                <li>
                  Spending:
                  <span className="ml-1 font-medium text-[#18223a]">
                    {formatPriceLabel(priceTier)}
                  </span>
                </li>
              </ul>
            </div>
          </div>
        ) : null}
      </GlassCard>

      <footer className="flex items-center justify-between pt-2">
        <button
          type="button"
          onClick={handleBack}
          disabled={step === 1 || submitting}
          className="rounded-full border border-white/45 bg-white/45 px-4 py-2 text-sm text-[#1d2742] transition hover:scale-[1.01] disabled:cursor-not-allowed disabled:opacity-60"
        >
          Back
        </button>

        {step === totalSteps ? (
          <button
            type="submit"
            disabled={!canSubmit || submitting}
            className="rounded-full border border-[#1d2742] bg-[#1d2742] px-5 py-2 text-sm font-semibold text-white shadow-[0_24px_52px_-32px_rgba(19,28,46,0.58)] transition hover:scale-[1.01] disabled:cursor-not-allowed disabled:opacity-60"
          >
            {submitting ? "Posting…" : "Submit post"}
          </button>
        ) : (
          <button
            type="button"
            onClick={handleNext}
            disabled={!canAdvance}
            className="rounded-full border border-[#1d2742] bg-[#1d2742] px-5 py-2 text-sm font-semibold text-white shadow-[0_24px_52px_-32px_rgba(19,28,46,0.58)] transition hover:scale-[1.01] disabled:cursor-not-allowed disabled:opacity-60"
          >
            Next step
          </button>
        )}
      </footer>
    </form>
  );
}
